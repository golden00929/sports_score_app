const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function findMissingParticipants() {
  try {
    console.log('=== ÎàÑÎùΩÎêú Ï∞∏Í∞ÄÏûê Ï∞æÍ∏∞ ===');
    
    const tournament = await prisma.tournament.findFirst({
      where: {
        tournamentType: 'hybrid'
      }
    });
    
    if (!tournament) {
      console.log('ÌïòÏù¥Î∏åÎ¶¨Îìú ÎåÄÌöåÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }
    
    // ÏäπÏù∏Îêú Î™®Îì† Ï∞∏Í∞ÄÏûê Î™©Î°ù
    const approvedParticipants = await prisma.participant.findMany({
      where: {
        tournamentId: tournament.id,
        approvalStatus: 'approved',
        isActive: true
      },
      include: {
        player: true
      }
    });
    
    console.log(`\nüë• ÏäπÏù∏Îêú Ï∞∏Í∞ÄÏûê: ${approvedParticipants.length}Î™Ö`);
    
    // Í∑∏Î£π Ïä§ÌÖåÏù¥ÏßÄ Îß§ÏπòÏóê Ìè¨Ìï®Îêú Ï∞∏Í∞ÄÏûêÎì§
    const groupMatches = await prisma.match.findMany({
      where: {
        tournament: {
          id: tournament.id
        },
        roundName: 'Group Stage'
      },
      select: {
        player1Name: true,
        player2Name: true
      }
    });
    
    const groupParticipantNames = new Set();
    groupMatches.forEach(match => {
      if (match.player1Name && match.player1Name !== 'TBD') {
        groupParticipantNames.add(match.player1Name);
      }
      if (match.player2Name && match.player2Name !== 'TBD') {
        groupParticipantNames.add(match.player2Name);
      }
    });
    
    console.log(`üìä Í∑∏Î£π Ïä§ÌÖåÏù¥ÏßÄÏóê Ìè¨Ìï®Îêú Ï∞∏Í∞ÄÏûê: ${groupParticipantNames.size}Î™Ö`);
    
    // ÎàÑÎùΩÎêú Ï∞∏Í∞ÄÏûê Ï∞æÍ∏∞
    const approvedNames = approvedParticipants.map(p => p.player.name);
    const missingParticipants = approvedNames.filter(name => !groupParticipantNames.has(name));
    
    console.log(`\n‚ùå Í∑∏Î£π Ïä§ÌÖåÏù¥ÏßÄÏóêÏÑú ÎàÑÎùΩÎêú Ï∞∏Í∞ÄÏûê (${missingParticipants.length}Î™Ö):`);
    missingParticipants.forEach((name, index) => {
      console.log(`  ${index + 1}. ${name}`);
    });
    
    // Ï§ëÎ≥µ Ï∞∏Í∞ÄÏûê ÌôïÏù∏
    const nameCount = {};
    approvedNames.forEach(name => {
      nameCount[name] = (nameCount[name] || 0) + 1;
    });
    
    const duplicateNames = Object.entries(nameCount).filter(([name, count]) => count > 1);
    
    if (duplicateNames.length > 0) {
      console.log(`\n‚ö†Ô∏è  Ï§ëÎ≥µÎêú Ïù¥Î¶ÑÏùò Ï∞∏Í∞ÄÏûê (${duplicateNames.length}Í∞ú):`);
      duplicateNames.forEach(([name, count]) => {
        console.log(`  ${name}: ${count}Î≤à Îì±Î°ùÎê®`);
      });
    } else {
      console.log('\n‚úÖ Ï§ëÎ≥µÎêú Ïù¥Î¶Ñ ÏóÜÏùå');
    }
    
    // Ïã§Ï†ú Ï∞∏Í∞ÄÏûê IDÏôÄ Ïù¥Î¶Ñ Îß§Ìïë ÌôïÏù∏
    console.log(`\nüîç Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù:`);
    console.log(`ÏäπÏù∏Îêú Ï∞∏Í∞ÄÏûê Î™©Î°ù:`);
    approvedParticipants.forEach((p, index) => {
      const isInGroup = groupParticipantNames.has(p.player.name);
      console.log(`  ${index + 1}. ${p.player.name} (ID: ${p.player.id}) ${isInGroup ? '‚úÖ' : '‚ùå'}`);
    });
    
  } catch (error) {
    console.error('Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

findMissingParticipants();