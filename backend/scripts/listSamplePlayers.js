const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function listTopPlayers() {
  console.log('üè∏ ÏÉÅÏúÑ ÏÑ†Ïàò 10Î™Ö Î™©Î°ù:\n');
  
  const topPlayers = await prisma.player.findMany({
    where: { isActive: true },
    select: {
      name: true,
      email: true,
      skillLevel: true,
      eloRating: true,
      province: true,
      district: true,
      isVerified: true
    },
    orderBy: { eloRating: 'desc' },
    take: 10
  });
  
  console.log('ÏàúÏúÑ | Ïù¥Î¶Ñ | Ïù¥Î©îÏùº | Îì±Í∏â | ELO | ÏßÄÏó≠ | Ïù∏Ï¶ù');
  console.log(''.padEnd(100, '-'));
  
  topPlayers.forEach((player, index) => {
    const skillName = {
      'a_class': 'Group A',
      'b_class': 'Group B', 
      'c_class': 'Group C',
      'd_class': 'Group D'
    }[player.skillLevel] || player.skillLevel;
    
    const verified = player.isVerified ? '‚úÖ' : '‚ùå';
    
    console.log(`${String(index + 1).padStart(2)} | ${player.name.padEnd(20)} | ${player.email.padEnd(25)} | ${skillName.padEnd(7)} | ${String(player.eloRating).padStart(4)} | ${(player.province + ' ' + player.district).padEnd(15)} | ${verified}`);
  });
  
  console.log('\nüí° Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥:');
  console.log('   ÎπÑÎ∞ÄÎ≤àÌò∏: player123');
  console.log('   Ïù¥Î©îÏùº: ÏúÑ Î™©Î°ùÏùò Ïù¥Î©îÏùº Ï£ºÏÜå ÏÇ¨Ïö©');
  
  // Í∞Å Îì±Í∏âÎ≥Ñ ÌÜµÍ≥Ñ
  console.log('\nüìä Îì±Í∏âÎ≥Ñ ÏÑ†Ïàò Î∂ÑÌè¨:');
  const stats = await prisma.player.groupBy({
    by: ['skillLevel'],
    _count: { id: true },
    where: { isActive: true }
  });
  
  stats.forEach(stat => {
    const levelName = {
      'a_class': 'Group A (Expert)',
      'b_class': 'Group B (Advanced)', 
      'c_class': 'Group C (Intermediate)',
      'd_class': 'Group D (Beginner)'
    }[stat.skillLevel] || `Unknown (${stat.skillLevel})`;
    console.log(`   ${levelName}: ${stat._count.id}Î™Ö`);
  });
}

async function main() {
  try {
    await listTopPlayers();
  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();